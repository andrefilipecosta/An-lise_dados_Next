import pandas as pd

# üßæ Carrega os dados
df = pd.read_json('pessoas_tratadas.json', encoding='utf-8')

print('\n--- üìä DISTRIBUI√á√ÉO DE G√äNERO ---')
genero_dist = df['genero'].value_counts(normalize=True).mul(100).round(2)
print(genero_dist.to_string())

print('\n--- üó∫Ô∏è DISTRIBUI√á√ÉO POR REGI√ÉO ---')
regiao_dist = df['regiao'].replace('', 'N√£o informado').value_counts(normalize=True).mul(100).round(2)
print(regiao_dist.to_string())

print('\n--- üö¶ QUALIDADE DOS DADOS ---')

# ‚û§ CPFs inv√°lidos: menos de 11 d√≠gitos
df['cpf_limpo'] = df['cpf'].str.replace(r'\D', '', regex=True)
cpfs_invalidos = df[df['cpf_limpo'].str.len() != 11]
print(f'CPFs inv√°lidos: {len(cpfs_invalidos)}')

# ‚û§ Telefones ausentes ou incompletos
df['celular_limpo'] = df['celular'].str.replace(r'\D', '', regex=True)
sem_celular = df[df['celular_limpo'].str.len() < 10]
print(f'Telefones ausentes ou incompletos: {len(sem_celular)}')

# ‚û§ CEPs inv√°lidos detectados via observa√ß√µes
com_erro_cep = df[df['observacoes'].apply(lambda obs: any('CEP inv√°lido' in o for o in obs))]
print(f'CEPs inv√°lidos: {len(com_erro_cep)}')

import pandas as pd

df = pd.read_json('pessoas_tratadas.json', encoding='utf-8')

# ‚öñÔ∏è Agrupa por g√™nero ‚Üí conta interesses ‚Üí normaliza ‚Üí pega top 5
preferencias_top5 = (
    df.groupby('genero')['interesse']
    .value_counts(normalize=True)
    .mul(100)
    .round(2)
    .groupby(level=0, group_keys=False)
    .nlargest(5)
)

#  Exibe resultado
print('\n--- üéØ TOP 5 √ÅREAS DE INTERESSE POR G√äNERO ---\n')
for genero in preferencias_top5.index.levels[0]:
    print(f'> {genero}\n')
    filtro = preferencias_top5[genero]
    print(filtro.to_string())
    print('\n' + '-' * 40 + '\n')